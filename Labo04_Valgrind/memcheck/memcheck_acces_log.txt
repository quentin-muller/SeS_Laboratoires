==10900== Memcheck, a memory error detector
==10900== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10900== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==10900== Command: ./memcheck_acces
==10900== Parent PID: 10896
==10900== 
==10900== Invalid read of size 4
==10900==    at 0x40116C: main (in /home/lmi/SeS/Labo04_Valgrind/memcheck/memcheck_acces)
==10900==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==10900== 
==10900== 
==10900== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==10900==  Access not within mapped region at address 0x0
==10900==    at 0x40116C: main (in /home/lmi/SeS/Labo04_Valgrind/memcheck/memcheck_acces)
==10900==  If you believe this happened as a result of a stack
==10900==  overflow in your program's main thread (unlikely but
==10900==  possible), you can try to increase the size of the
==10900==  main thread stack using the --main-stacksize= flag.
==10900==  The main thread stack size used in this run was 8388608.
==10900== 
==10900== HEAP SUMMARY:
==10900==     in use at exit: 1,024 bytes in 1 blocks
==10900==   total heap usage: 1 allocs, 0 frees, 1,024 bytes allocated
==10900== 
==10900== LEAK SUMMARY:
==10900==    definitely lost: 0 bytes in 0 blocks
==10900==    indirectly lost: 0 bytes in 0 blocks
==10900==      possibly lost: 0 bytes in 0 blocks
==10900==    still reachable: 1,024 bytes in 1 blocks
==10900==         suppressed: 0 bytes in 0 blocks
==10900== Rerun with --leak-check=full to see details of leaked memory
==10900== 
==10900== For lists of detected and suppressed errors, rerun with: -s
==10900== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
